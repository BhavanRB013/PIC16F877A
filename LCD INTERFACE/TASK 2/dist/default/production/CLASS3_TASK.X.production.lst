

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Jul 12 23:12:23 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172                           
   173                           	psect	idataBANK0
   174     06B5                     __pidataBANK0:
   175                           
   176                           ;initializer for _arr
   177     06B5  3442               	retlw	66
   178     06B6  3448               	retlw	72
   179     06B7  3441               	retlw	65
   180     06B8  3456               	retlw	86
   181     06B9  3441               	retlw	65
   182     06BA  344E               	retlw	78
   183     06BB  3400               	retlw	0
   184     0008                     _PORTD	set	8
   185     0007                     _PORTC	set	7
   186     0088                     _TRISD	set	136
   187     0087                     _TRISC	set	135
   188                           
   189                           	psect	cinit
   190     07EC                     start_initialization:	
   191                           ; #config settings
   192                           
   193     07EC                     __initialization:
   194                           
   195                           ; Initialize objects allocated to BANK0
   196     07EC  1383               	bcf	3,7	;select IRP bank0
   197     07ED  3027               	movlw	low (__pdataBANK0+7)
   198     07EE  00FD               	movwf	btemp+-1
   199     07EF  3006               	movlw	high __pidataBANK0
   200     07F0  00FE               	movwf	btemp
   201     07F1  30B5               	movlw	low __pidataBANK0
   202     07F2  00FF               	movwf	btemp+1
   203     07F3  3020               	movlw	low __pdataBANK0
   204     07F4  0084               	movwf	4
   205     07F5  120A  118A  26C0  120A  118A  	fcall	init_ram0
   206                           
   207                           ; Clear objects allocated to COMMON
   208     07FA  01F6               	clrf	__pbssCOMMON& (0+127)
   209     07FB  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   210     07FC                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213     07FC                     __end_of__initialization:
   214     07FC  0183               	clrf	3
   215     07FD  120A  118A  2EFA   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	bssCOMMON
   218     0076                     __pbssCOMMON:
   219     0076                     _j:
   220     0076                     	ds	1
   221     0077                     _i:
   222     0077                     	ds	1
   223                           
   224                           	psect	dataBANK0
   225     0020                     __pdataBANK0:
   226     0020                     _arr:
   227     0020                     	ds	7
   228                           
   229                           	psect	inittext
   230     06BC                     init_fetch0:	
   231                           ;	Called with low address in FSR and high address in W
   232                           
   233     06BC  087E               	movf	btemp,w
   234     06BD  008A               	movwf	10
   235     06BE  087F               	movf	btemp+1,w
   236     06BF  0082               	movwf	2
   237     06C0                     init_ram0:	
   238                           ;Called with:
   239                           ;	high address of idata address in btemp 
   240                           ;	low address of idata address in btemp+1 
   241                           ;	low address of data in FSR
   242                           ;	high address + 1 of data in btemp-1
   243                           
   244     06C0  120A  118A  26BC  120A  118A  	fcall	init_fetch0
   245     06C5  0080               	movwf	0
   246     06C6  0A84               	incf	4,f
   247     06C7  0804               	movf	4,w
   248     06C8  067D               	xorwf	btemp+-1,w
   249     06C9  1903               	btfsc	3,2
   250     06CA  3400               	retlw	0
   251     06CB  0AFF               	incf	btemp+1,f
   252     06CC  1903               	btfsc	3,2
   253     06CD  0AFE               	incf	btemp,f
   254     06CE  2EC0               	goto	init_ram0
   255                           
   256                           	psect	cstackCOMMON
   257     0070                     __pcstackCOMMON:
   258     0070                     ?_init:
   259     0070                     ?_lcd_data:	
   260                           ; 1 bytes @ 0x0
   261                           
   262     0070                     ??_lcd_data:	
   263                           ; 1 bytes @ 0x0
   264                           
   265     0070                     ?_init1:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     0070                     ?_lcd_command:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0070                     ??_lcd_command:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     0070                     ?_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277                           
   278                           ; 1 bytes @ 0x0
   279     0070                     	ds	2
   280     0072                     lcd_data@value:
   281     0072                     lcd_command@value:	
   282                           ; 1 bytes @ 0x2
   283                           
   284                           
   285                           ; 1 bytes @ 0x2
   286     0072                     	ds	1
   287     0073                     ??_init:
   288     0073                     ??_init1:	
   289                           ; 1 bytes @ 0x3
   290                           
   291                           
   292                           ; 1 bytes @ 0x3
   293     0073                     	ds	2
   294     0075                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x5
   297     0075                     	ds	1
   298                           
   299                           	psect	maintext
   300     06FA                     __pmaintext:	
   301 ;;
   302 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   303 ;;
   304 ;; *************** function _main *****************
   305 ;; Defined at:
   306 ;;		line 31 in file "class3_task.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;		None
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   315 ;; Tracked objects:
   316 ;;		On entry : B00/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   320 ;;      Params:         0       0       0       0       0
   321 ;;      Locals:         0       0       0       0       0
   322 ;;      Temps:          1       0       0       0       0
   323 ;;      Totals:         1       0       0       0       0
   324 ;;Total ram usage:        1 bytes
   325 ;; Hardware stack levels required when called: 2
   326 ;; This function calls:
   327 ;;		_init
   328 ;;		_init1
   329 ;;		_lcd_data
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335     06FA                     _main:	
   336                           ;psect for function _main
   337                           
   338     06FA                     l730:	
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   341                           
   342                           
   343                           ;class3_task.c: 32:     TRISC=0X00;
   344     06FA  1683               	bsf	3,5	;RP0=1, select bank1
   345     06FB  1303               	bcf	3,6	;RP1=0, select bank1
   346     06FC  0187               	clrf	7	;volatile
   347                           
   348                           ;class3_task.c: 33:     TRISD=0X00;
   349     06FD  0188               	clrf	8	;volatile
   350     06FE                     l732:
   351                           
   352                           ;class3_task.c: 34:     init();
   353     06FE  120A  118A  2736  120A  118A  	fcall	_init
   354     0703                     l734:
   355                           
   356                           ;class3_task.c: 35:     for(i=0;i<11;i++){
   357     0703  01F7               	clrf	_i
   358     0704                     l740:
   359                           
   360                           ;class3_task.c: 36:         lcd_data(arr[i]);
   361     0704  0877               	movf	_i,w
   362     0705  3E20               	addlw	(low (_arr| 0))& (0+255)
   363     0706  0084               	movwf	4
   364     0707  1383               	bcf	3,7	;select IRP bank0
   365     0708  0800               	movf	0,w
   366     0709  120A  118A  26CF  120A  118A  	fcall	_lcd_data
   367     070E                     l742:
   368                           
   369                           ;class3_task.c: 37:     }
   370     070E  3001               	movlw	1
   371     070F  00F5               	movwf	??_main
   372     0710  0875               	movf	??_main,w
   373     0711  07F7               	addwf	_i,f
   374     0712                     l744:
   375     0712  300B               	movlw	11
   376     0713  0277               	subwf	_i,w
   377     0714  1C03               	skipc
   378     0715  2F17               	goto	u31
   379     0716  2F18               	goto	u30
   380     0717                     u31:
   381     0717  2F04               	goto	l740
   382     0718                     u30:
   383     0718                     l746:
   384                           
   385                           ;class3_task.c: 38:     init1();
   386     0718  120A  118A  2791  120A  118A  	fcall	_init1
   387     071D                     l748:
   388                           
   389                           ;class3_task.c: 39:     for(j=0;j<11;j++){
   390     071D  01F6               	clrf	_j
   391     071E                     l754:
   392                           
   393                           ;class3_task.c: 40:         lcd_data(arr[j]);
   394     071E  0876               	movf	_j,w
   395     071F  3E20               	addlw	(low (_arr| 0))& (0+255)
   396     0720  0084               	movwf	4
   397     0721  1383               	bcf	3,7	;select IRP bank0
   398     0722  0800               	movf	0,w
   399     0723  120A  118A  26CF  120A  118A  	fcall	_lcd_data
   400     0728                     l756:
   401                           
   402                           ;class3_task.c: 41:     }
   403     0728  3001               	movlw	1
   404     0729  00F5               	movwf	??_main
   405     072A  0875               	movf	??_main,w
   406     072B  07F6               	addwf	_j,f
   407     072C                     l758:
   408     072C  300B               	movlw	11
   409     072D  0276               	subwf	_j,w
   410     072E  1C03               	skipc
   411     072F  2F31               	goto	u41
   412     0730  2F32               	goto	u40
   413     0731                     u41:
   414     0731  2F1E               	goto	l754
   415     0732                     u40:
   416     0732                     l33:	
   417                           ;class3_task.c: 42:     while(1);
   418                           
   419     0732  2F32               	goto	l33
   420     0733  120A  118A  2800   	ljmp	start
   421     0736                     __end_of_main:
   422                           
   423                           	psect	text1
   424     06CF                     __ptext1:	
   425 ;; *************** function _lcd_data *****************
   426 ;; Defined at:
   427 ;;		line 81 in file "class3_task.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;  value           1    wreg     unsigned char 
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  value           1    2[COMMON] unsigned char 
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, status,2, status,0
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   441 ;;      Params:         0       0       0       0       0
   442 ;;      Locals:         1       0       0       0       0
   443 ;;      Temps:          2       0       0       0       0
   444 ;;      Totals:         3       0       0       0       0
   445 ;;Total ram usage:        3 bytes
   446 ;; Hardware stack levels used: 1
   447 ;; This function calls:
   448 ;;		Nothing
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454     06CF                     _lcd_data:	
   455                           ;psect for function _lcd_data
   456                           
   457                           
   458                           ;incstack = 0
   459                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   460                           ;lcd_data@value stored from wreg
   461     06CF  00F2               	movwf	lcd_data@value
   462     06D0                     l702:
   463                           
   464                           ;class3_task.c: 82:     PORTC|=0X08;
   465     06D0  1283               	bcf	3,5	;RP0=0, select bank0
   466     06D1  1303               	bcf	3,6	;RP1=0, select bank0
   467     06D2  1587               	bsf	7,3	;volatile
   468     06D3                     l704:
   469                           
   470                           ;class3_task.c: 83:     PORTD=value;
   471     06D3  0872               	movf	lcd_data@value,w
   472     06D4  0088               	movwf	8	;volatile
   473     06D5                     l706:
   474                           
   475                           ;class3_task.c: 84:     PORTC|=0x01;
   476     06D5  1407               	bsf	7,0	;volatile
   477     06D6                     l708:
   478                           
   479                           ;class3_task.c: 85:     PORTC&= ~0x01;
   480     06D6  30FE               	movlw	254
   481     06D7  00F0               	movwf	??_lcd_data
   482     06D8  0870               	movf	??_lcd_data,w
   483     06D9  0587               	andwf	7,f	;volatile
   484     06DA                     l710:
   485                           
   486                           ;class3_task.c: 86:     _delay((unsigned long)((100)*(6000000/4000.0)));
   487     06DA  30C3               	movlw	195
   488     06DB  00F1               	movwf	??_lcd_data+1
   489     06DC  30CD               	movlw	205
   490     06DD  00F0               	movwf	??_lcd_data
   491     06DE                     u57:
   492     06DE  0BF0               	decfsz	??_lcd_data,f
   493     06DF  2EDE               	goto	u57
   494     06E0  0BF1               	decfsz	??_lcd_data+1,f
   495     06E1  2EDE               	goto	u57
   496     06E2                     l45:
   497     06E2  0008               	return
   498     06E3                     __end_of_lcd_data:
   499                           
   500                           	psect	text2
   501     0791                     __ptext2:	
   502 ;; *************** function _init1 *****************
   503 ;; Defined at:
   504 ;;		line 63 in file "class3_task.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, status,2, status,0, pclath, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   518 ;;      Params:         0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0
   520 ;;      Temps:          2       0       0       0       0
   521 ;;      Totals:         2       0       0       0       0
   522 ;;Total ram usage:        2 bytes
   523 ;; Hardware stack levels used: 1
   524 ;; Hardware stack levels required when called: 1
   525 ;; This function calls:
   526 ;;		_lcd_command
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532     0791                     _init1:	
   533                           ;psect for function _init1
   534                           
   535     0791                     l712:	
   536                           ;incstack = 0
   537                           ; Regs used in _init1: [wreg+status,2+status,0+pclath+cstack]
   538                           
   539                           
   540                           ;class3_task.c: 65:     lcd_command(0X30);
   541     0791  3030               	movlw	48
   542     0792  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   543     0797                     l714:
   544                           
   545                           ;class3_task.c: 66:     _delay((unsigned long)((100)*(6000000/4000.0)));
   546     0797  30C3               	movlw	195
   547     0798  00F4               	movwf	??_init1+1
   548     0799  30CD               	movlw	205
   549     079A  00F3               	movwf	??_init1
   550     079B                     u67:
   551     079B  0BF3               	decfsz	??_init1,f
   552     079C  2F9B               	goto	u67
   553     079D  0BF4               	decfsz	??_init1+1,f
   554     079E  2F9B               	goto	u67
   555     079F                     l716:
   556                           
   557                           ;class3_task.c: 67:     lcd_command(0X3F);
   558     079F  303F               	movlw	63
   559     07A0  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   560                           
   561                           ;class3_task.c: 68:     _delay((unsigned long)((100)*(6000000/4000.0)));
   562     07A5  30C3               	movlw	195
   563     07A6  00F4               	movwf	??_init1+1
   564     07A7  30CD               	movlw	205
   565     07A8  00F3               	movwf	??_init1
   566     07A9                     u77:
   567     07A9  0BF3               	decfsz	??_init1,f
   568     07AA  2FA9               	goto	u77
   569     07AB  0BF4               	decfsz	??_init1+1,f
   570     07AC  2FA9               	goto	u77
   571     07AD                     l718:
   572                           
   573                           ;class3_task.c: 69:     lcd_command(0X30);
   574     07AD  3030               	movlw	48
   575     07AE  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   576     07B3                     l720:
   577                           
   578                           ;class3_task.c: 70:     _delay((unsigned long)((100)*(6000000/4000.0)));
   579     07B3  30C3               	movlw	195
   580     07B4  00F4               	movwf	??_init1+1
   581     07B5  30CD               	movlw	205
   582     07B6  00F3               	movwf	??_init1
   583     07B7                     u87:
   584     07B7  0BF3               	decfsz	??_init1,f
   585     07B8  2FB7               	goto	u87
   586     07B9  0BF4               	decfsz	??_init1+1,f
   587     07BA  2FB7               	goto	u87
   588                           
   589                           ;class3_task.c: 71:     lcd_command(0X38);
   590     07BB  3038               	movlw	56
   591     07BC  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   592     07C1                     l722:
   593                           
   594                           ;class3_task.c: 72:     _delay((unsigned long)((100)*(6000000/4000.0)));
   595     07C1  30C3               	movlw	195
   596     07C2  00F4               	movwf	??_init1+1
   597     07C3  30CD               	movlw	205
   598     07C4  00F3               	movwf	??_init1
   599     07C5                     u97:
   600     07C5  0BF3               	decfsz	??_init1,f
   601     07C6  2FC5               	goto	u97
   602     07C7  0BF4               	decfsz	??_init1+1,f
   603     07C8  2FC5               	goto	u97
   604     07C9                     l724:
   605                           
   606                           ;class3_task.c: 73:     lcd_command(0X0C);
   607     07C9  300C               	movlw	12
   608     07CA  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   609                           
   610                           ;class3_task.c: 74:     _delay((unsigned long)((100)*(6000000/4000.0)));
   611     07CF  30C3               	movlw	195
   612     07D0  00F4               	movwf	??_init1+1
   613     07D1  30CD               	movlw	205
   614     07D2  00F3               	movwf	??_init1
   615     07D3                     u107:
   616     07D3  0BF3               	decfsz	??_init1,f
   617     07D4  2FD3               	goto	u107
   618     07D5  0BF4               	decfsz	??_init1+1,f
   619     07D6  2FD3               	goto	u107
   620     07D7                     l726:
   621                           
   622                           ;class3_task.c: 76:     lcd_command(0X04);
   623     07D7  3004               	movlw	4
   624     07D8  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   625     07DD                     l728:
   626                           
   627                           ;class3_task.c: 77:     _delay((unsigned long)((100)*(6000000/4000.0)));
   628     07DD  30C3               	movlw	195
   629     07DE  00F4               	movwf	??_init1+1
   630     07DF  30CD               	movlw	205
   631     07E0  00F3               	movwf	??_init1
   632     07E1                     u117:
   633     07E1  0BF3               	decfsz	??_init1,f
   634     07E2  2FE1               	goto	u117
   635     07E3  0BF4               	decfsz	??_init1+1,f
   636     07E4  2FE1               	goto	u117
   637                           
   638                           ;class3_task.c: 78:     lcd_command(0xCC);
   639     07E5  30CC               	movlw	204
   640     07E6  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   641     07EB                     l42:
   642     07EB  0008               	return
   643     07EC                     __end_of_init1:
   644                           
   645                           	psect	text3
   646     0736                     __ptext3:	
   647 ;; *************** function _init *****************
   648 ;; Defined at:
   649 ;;		line 45 in file "class3_task.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, status,2, status,0, pclath, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   663 ;;      Params:         0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0
   665 ;;      Temps:          2       0       0       0       0
   666 ;;      Totals:         2       0       0       0       0
   667 ;;Total ram usage:        2 bytes
   668 ;; Hardware stack levels used: 1
   669 ;; Hardware stack levels required when called: 1
   670 ;; This function calls:
   671 ;;		_lcd_command
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677     0736                     _init:	
   678                           ;psect for function _init
   679                           
   680     0736                     l684:	
   681                           ;incstack = 0
   682                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   683                           
   684                           
   685                           ;class3_task.c: 47:     lcd_command(0X30);
   686     0736  3030               	movlw	48
   687     0737  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   688     073C                     l686:
   689                           
   690                           ;class3_task.c: 48:     _delay((unsigned long)((100)*(6000000/4000.0)));
   691     073C  30C3               	movlw	195
   692     073D  00F4               	movwf	??_init+1
   693     073E  30CD               	movlw	205
   694     073F  00F3               	movwf	??_init
   695     0740                     u127:
   696     0740  0BF3               	decfsz	??_init,f
   697     0741  2F40               	goto	u127
   698     0742  0BF4               	decfsz	??_init+1,f
   699     0743  2F40               	goto	u127
   700     0744                     l688:
   701                           
   702                           ;class3_task.c: 49:     lcd_command(0X3F);
   703     0744  303F               	movlw	63
   704     0745  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   705                           
   706                           ;class3_task.c: 50:     _delay((unsigned long)((100)*(6000000/4000.0)));
   707     074A  30C3               	movlw	195
   708     074B  00F4               	movwf	??_init+1
   709     074C  30CD               	movlw	205
   710     074D  00F3               	movwf	??_init
   711     074E                     u137:
   712     074E  0BF3               	decfsz	??_init,f
   713     074F  2F4E               	goto	u137
   714     0750  0BF4               	decfsz	??_init+1,f
   715     0751  2F4E               	goto	u137
   716     0752                     l690:
   717                           
   718                           ;class3_task.c: 51:     lcd_command(0X30);
   719     0752  3030               	movlw	48
   720     0753  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   721     0758                     l692:
   722                           
   723                           ;class3_task.c: 52:     _delay((unsigned long)((100)*(6000000/4000.0)));
   724     0758  30C3               	movlw	195
   725     0759  00F4               	movwf	??_init+1
   726     075A  30CD               	movlw	205
   727     075B  00F3               	movwf	??_init
   728     075C                     u147:
   729     075C  0BF3               	decfsz	??_init,f
   730     075D  2F5C               	goto	u147
   731     075E  0BF4               	decfsz	??_init+1,f
   732     075F  2F5C               	goto	u147
   733                           
   734                           ;class3_task.c: 53:     lcd_command(0X38);
   735     0760  3038               	movlw	56
   736     0761  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   737     0766                     l694:
   738                           
   739                           ;class3_task.c: 54:     _delay((unsigned long)((100)*(6000000/4000.0)));
   740     0766  30C3               	movlw	195
   741     0767  00F4               	movwf	??_init+1
   742     0768  30CD               	movlw	205
   743     0769  00F3               	movwf	??_init
   744     076A                     u157:
   745     076A  0BF3               	decfsz	??_init,f
   746     076B  2F6A               	goto	u157
   747     076C  0BF4               	decfsz	??_init+1,f
   748     076D  2F6A               	goto	u157
   749     076E                     l696:
   750                           
   751                           ;class3_task.c: 55:     lcd_command(0X0C);
   752     076E  300C               	movlw	12
   753     076F  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   754                           
   755                           ;class3_task.c: 56:     _delay((unsigned long)((100)*(6000000/4000.0)));
   756     0774  30C3               	movlw	195
   757     0775  00F4               	movwf	??_init+1
   758     0776  30CD               	movlw	205
   759     0777  00F3               	movwf	??_init
   760     0778                     u167:
   761     0778  0BF3               	decfsz	??_init,f
   762     0779  2F78               	goto	u167
   763     077A  0BF4               	decfsz	??_init+1,f
   764     077B  2F78               	goto	u167
   765     077C                     l698:
   766                           
   767                           ;class3_task.c: 58:     lcd_command(0X06);
   768     077C  3006               	movlw	6
   769     077D  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   770     0782                     l700:
   771                           
   772                           ;class3_task.c: 59:     _delay((unsigned long)((100)*(6000000/4000.0)));
   773     0782  30C3               	movlw	195
   774     0783  00F4               	movwf	??_init+1
   775     0784  30CD               	movlw	205
   776     0785  00F3               	movwf	??_init
   777     0786                     u177:
   778     0786  0BF3               	decfsz	??_init,f
   779     0787  2F86               	goto	u177
   780     0788  0BF4               	decfsz	??_init+1,f
   781     0789  2F86               	goto	u177
   782                           
   783                           ;class3_task.c: 60:     lcd_command(0x83);
   784     078A  3083               	movlw	131
   785     078B  120A  118A  26E3  120A  118A  	fcall	_lcd_command
   786     0790                     l39:
   787     0790  0008               	return
   788     0791                     __end_of_init:
   789                           
   790                           	psect	text4
   791     06E3                     __ptext4:	
   792 ;; *************** function _lcd_command *****************
   793 ;; Defined at:
   794 ;;		line 89 in file "class3_task.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  value           1    wreg     unsigned char 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  value           1    2[COMMON] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       0       0       0       0
   809 ;;      Locals:         1       0       0       0       0
   810 ;;      Temps:          2       0       0       0       0
   811 ;;      Totals:         3       0       0       0       0
   812 ;;Total ram usage:        3 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_init
   818 ;;		_init1
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822     06E3                     _lcd_command:	
   823                           ;psect for function _lcd_command
   824                           
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _lcd_command: [wreg+status,2+status,0]
   828                           ;lcd_command@value stored from wreg
   829     06E3  00F2               	movwf	lcd_command@value
   830     06E4                     l676:
   831                           
   832                           ;class3_task.c: 90:     PORTC&= ~0X08;
   833     06E4  30F7               	movlw	247
   834     06E5  00F0               	movwf	??_lcd_command
   835     06E6  0870               	movf	??_lcd_command,w
   836     06E7  1283               	bcf	3,5	;RP0=0, select bank0
   837     06E8  1303               	bcf	3,6	;RP1=0, select bank0
   838     06E9  0587               	andwf	7,f	;volatile
   839     06EA                     l678:
   840                           
   841                           ;class3_task.c: 91:     PORTD=value;
   842     06EA  0872               	movf	lcd_command@value,w
   843     06EB  0088               	movwf	8	;volatile
   844     06EC                     l680:
   845                           
   846                           ;class3_task.c: 92:     PORTC|=0x01;
   847     06EC  1407               	bsf	7,0	;volatile
   848     06ED                     l682:
   849                           
   850                           ;class3_task.c: 93:     PORTC&= ~0x01;
   851     06ED  30FE               	movlw	254
   852     06EE  00F0               	movwf	??_lcd_command
   853     06EF  0870               	movf	??_lcd_command,w
   854     06F0  0587               	andwf	7,f	;volatile
   855                           
   856                           ;class3_task.c: 94:     _delay((unsigned long)((100)*(6000000/4000.0)));
   857     06F1  30C3               	movlw	195
   858     06F2  00F1               	movwf	??_lcd_command+1
   859     06F3  30CD               	movlw	205
   860     06F4  00F0               	movwf	??_lcd_command
   861     06F5                     u187:
   862     06F5  0BF0               	decfsz	??_lcd_command,f
   863     06F6  2EF5               	goto	u187
   864     06F7  0BF1               	decfsz	??_lcd_command+1,f
   865     06F8  2EF5               	goto	u187
   866     06F9                     l48:
   867     06F9  0008               	return
   868     06FA                     __end_of_lcd_command:
   869     007E                     btemp	set	126	;btemp
   870     007E                     wtemp0	set	126
   871                           
   872                           	psect	config
   873                           
   874                           ;Config register CONFIG @ 0x2007
   875                           ;	Oscillator Selection bits
   876                           ;	FOSC = EXTRC, RC oscillator
   877                           ;	Watchdog Timer Enable bit
   878                           ;	WDTE = OFF, WDT disabled
   879                           ;	Power-up Timer Enable bit
   880                           ;	PWRTE = OFF, PWRT disabled
   881                           ;	Brown-out Reset Enable bit
   882                           ;	BOREN = OFF, BOR disabled
   883                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   884                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   885                           ;	Data EEPROM Memory Code Protection bit
   886                           ;	CPD = OFF, Data EEPROM code protection off
   887                           ;	Flash Program Memory Write Enable bits
   888                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   889                           ;	In-Circuit Debugger Mode bit
   890                           ;	DEBUG = 0x1, unprogrammed default
   891                           ;	Flash Program Memory Code Protection bit
   892                           ;	CP = OFF, Code protection off
   893     2007                     	org	8199
   894     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _main->_init1
    _init1->_lcd_command
    _init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      66
                                              5 COMMON     1     1      0
                               _init
                              _init1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _init1                                                2     2      0      22
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _lcd_command
   _init1
     _lcd_command
   _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       7       5        8.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       F      12        0.0%
ABS                  0      0       F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Jul 12 23:12:23 2024

                      _i 0077                        _j 0076                        pc 0002  
                     l33 0732                       l42 07EB                       l45 06E2  
                     l39 0790                       l48 06F9                       u30 0718  
                     u31 0717                       u40 0732                       u41 0731  
                     u57 06DE                       u67 079B                       u77 07A9  
                     u87 07B7                       u97 07C5                       fsr 0004  
          lcd_data@value 0072                      l700 0782                      l710 06DA  
                    l702 06D0                      l720 07B3                      l712 0791  
                    l704 06D3                      l722 07C1                      l714 0797  
                    l706 06D5                      l730 06FA                      l724 07C9  
                    l716 079F                      l708 06D6                      l740 0704  
                    l732 06FE                      l726 07D7                      l718 07AD  
                    l742 070E                      l734 0703                      l680 06EC  
                    l728 07DD                      l744 0712                      l682 06ED  
                    l690 0752                      l754 071E                      l746 0718  
                    l676 06E4                      l692 0758                      l684 0736  
                    l756 0728                      l748 071D                      l678 06EA  
                    l694 0766                      l686 073C                      l758 072C  
                    l696 076E                      l688 0744                      l698 077C  
                    u107 07D3                      u117 07E1                      u127 0740  
                    u137 074E                      u147 075C                      u157 076A  
                    u167 0778                      u177 0786                      u187 06F5  
                    _arr 0020                      fsr0 0004                      indf 0000  
                   _main 06FA                     _init 0736                     btemp 007E  
                   start 0000                    ?_main 0070                    ?_init 0070  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088                    _init1 0791                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07EC  
           __end_of_main 0736             __end_of_init 0791                   ??_main 0075  
                 ??_init 0073                   ?_init1 0070         __end_of_lcd_data 06E3  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 06B5  
          __end_of_init1 07EC                  ??_init1 0073               __pmaintext 06FA  
              ?_lcd_data 0070                  __ptext1 06CF                  __ptext2 0791  
                __ptext3 0736                  __ptext4 06E3               ??_lcd_data 0070  
   end_of_initialization 07FC            ??_lcd_command 0070      start_initialization 07EC  
             init_fetch0 06BC      __end_of_lcd_command 06FA              __pdataBANK0 0020  
            __pbssCOMMON 0076                ___latbits 0002         lcd_command@value 0072  
            _lcd_command 06E3                 _lcd_data 06CF                 init_ram0 06C0  
           ?_lcd_command 0070  
