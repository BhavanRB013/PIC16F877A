

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Jul 18 22:28:22 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171                           
   172                           	psect	idataBANK0
   173     0718                     __pidataBANK0:
   174                           
   175                           ;initializer for _arr
   176     0718  3448               	retlw	72
   177     0719  3445               	retlw	69
   178     071A  344C               	retlw	76
   179     071B  344C               	retlw	76
   180     071C  344F               	retlw	79
   181     071D  3420               	retlw	32
   182     071E  3457               	retlw	87
   183     071F  344F               	retlw	79
   184     0720  3452               	retlw	82
   185     0721  344C               	retlw	76
   186     0722  3444               	retlw	68
   187     0723  3400               	retlw	0
   188     0008                     _PORTD	set	8
   189     0007                     _PORTC	set	7
   190     0088                     _TRISD	set	136
   191     0087                     _TRISC	set	135
   192                           
   193                           	psect	cinit
   194     07ED                     start_initialization:	
   195                           ; #config settings
   196                           
   197     07ED                     __initialization:
   198                           
   199                           ; Initialize objects allocated to BANK0
   200     07ED  1383               	bcf	3,7	;select IRP bank0
   201     07EE  302C               	movlw	low (__pdataBANK0+12)
   202     07EF  00FD               	movwf	btemp+-1
   203     07F0  3007               	movlw	high __pidataBANK0
   204     07F1  00FE               	movwf	btemp
   205     07F2  3018               	movlw	low __pidataBANK0
   206     07F3  00FF               	movwf	btemp+1
   207     07F4  3020               	movlw	low __pdataBANK0
   208     07F5  0084               	movwf	4
   209     07F6  120A  118A  2728  120A  118A  	fcall	init_ram0
   210                           
   211                           ; Clear objects allocated to COMMON
   212     07FB  01F6               	clrf	__pbssCOMMON& (0+127)
   213     07FC                     end_of_initialization:	
   214                           ;End of C runtime variable initialization code
   215                           
   216     07FC                     __end_of__initialization:
   217     07FC  0183               	clrf	3
   218     07FD  120A  118A  2F62   	ljmp	_main	;jump to C main() function
   219                           
   220                           	psect	bssCOMMON
   221     0076                     __pbssCOMMON:
   222     0076                     _i:
   223     0076                     	ds	1
   224                           
   225                           	psect	dataBANK0
   226     0020                     __pdataBANK0:
   227     0020                     _arr:
   228     0020                     	ds	12
   229                           
   230                           	psect	inittext
   231     0724                     init_fetch0:	
   232                           ;	Called with low address in FSR and high address in W
   233                           
   234     0724  087E               	movf	btemp,w
   235     0725  008A               	movwf	10
   236     0726  087F               	movf	btemp+1,w
   237     0727  0082               	movwf	2
   238     0728                     init_ram0:	
   239                           ;Called with:
   240                           ;	high address of idata address in btemp 
   241                           ;	low address of idata address in btemp+1 
   242                           ;	low address of data in FSR
   243                           ;	high address + 1 of data in btemp-1
   244                           
   245     0728  120A  118A  2724  120A  118A  	fcall	init_fetch0
   246     072D  0080               	movwf	0
   247     072E  0A84               	incf	4,f
   248     072F  0804               	movf	4,w
   249     0730  067D               	xorwf	btemp+-1,w
   250     0731  1903               	btfsc	3,2
   251     0732  3400               	retlw	0
   252     0733  0AFF               	incf	btemp+1,f
   253     0734  1903               	btfsc	3,2
   254     0735  0AFE               	incf	btemp,f
   255     0736  2F28               	goto	init_ram0
   256                           
   257                           	psect	cstackCOMMON
   258     0070                     __pcstackCOMMON:
   259     0070                     ?_init:
   260     0070                     ?_lcd_command:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ??_lcd_command:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?_lcd_data:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ??_lcd_data:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275                           
   276                           ; 1 bytes @ 0x0
   277     0070                     	ds	2
   278     0072                     lcd_data@value:
   279     0072                     lcd_command@value:	
   280                           ; 1 bytes @ 0x2
   281                           
   282                           
   283                           ; 1 bytes @ 0x2
   284     0072                     	ds	1
   285     0073                     ??_init:
   286                           
   287                           ; 1 bytes @ 0x3
   288     0073                     	ds	2
   289     0075                     ??_main:
   290                           
   291                           ; 1 bytes @ 0x5
   292     0075                     	ds	1
   293                           
   294                           	psect	maintext
   295     0762                     __pmaintext:	
   296 ;;
   297 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   298 ;;
   299 ;; *************** function _main *****************
   300 ;; Defined at:
   301 ;;		line 29 in file "class3_output.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;		None
   304 ;; Auto vars:     Size  Location     Type
   305 ;;		None
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : B00/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   315 ;;      Params:         0       0       0       0       0
   316 ;;      Locals:         0       0       0       0       0
   317 ;;      Temps:          1       0       0       0       0
   318 ;;      Totals:         1       0       0       0       0
   319 ;;Total ram usage:        1 bytes
   320 ;; Hardware stack levels required when called: 2
   321 ;; This function calls:
   322 ;;		_init
   323 ;;		_lcd_command
   324 ;;		_lcd_data
   325 ;; This function is called by:
   326 ;;		Startup code after reset
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330     0762                     _main:	
   331                           ;psect for function _main
   332                           
   333     0762                     l693:	
   334                           ;incstack = 0
   335                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   336                           
   337                           
   338                           ;class3_output.c: 30:     init();
   339     0762  120A  118A  2786  120A  118A  	fcall	_init
   340                           
   341                           ;class3_output.c: 31:     lcd_command(0x80);
   342     0767  3080               	movlw	128
   343     0768  120A  118A  274B  120A  118A  	fcall	_lcd_command
   344     076D                     l695:
   345                           
   346                           ;class3_output.c: 32:     for(i=0;i<11;i++){
   347     076D  01F6               	clrf	_i
   348     076E                     l701:
   349                           
   350                           ;class3_output.c: 33:         lcd_data(arr[i]);
   351     076E  0876               	movf	_i,w
   352     076F  3E20               	addlw	(low (_arr| 0))& (0+255)
   353     0770  0084               	movwf	4
   354     0771  1383               	bcf	3,7	;select IRP bank0
   355     0772  0800               	movf	0,w
   356     0773  120A  118A  2737  120A  118A  	fcall	_lcd_data
   357     0778                     l703:
   358                           
   359                           ;class3_output.c: 34:     }
   360     0778  3001               	movlw	1
   361     0779  00F5               	movwf	??_main
   362     077A  0875               	movf	??_main,w
   363     077B  07F6               	addwf	_i,f
   364     077C                     l705:
   365     077C  300B               	movlw	11
   366     077D  0276               	subwf	_i,w
   367     077E  1C03               	skipc
   368     077F  2F81               	goto	u21
   369     0780  2F82               	goto	u20
   370     0781                     u21:
   371     0781  2F6E               	goto	l701
   372     0782                     u20:
   373     0782                     l27:	
   374                           ;class3_output.c: 35:     while(1);
   375                           
   376     0782  2F82               	goto	l27
   377     0783  120A  118A  2800   	ljmp	start
   378     0786                     __end_of_main:
   379                           
   380                           	psect	text1
   381     0737                     __ptext1:	
   382 ;; *************** function _lcd_data *****************
   383 ;; Defined at:
   384 ;;		line 57 in file "class3_output.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  value           1    wreg     unsigned char 
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  value           1    2[COMMON] unsigned char 
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, status,2, status,0
   393 ;; Tracked objects:
   394 ;;		On entry : 0/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   398 ;;      Params:         0       0       0       0       0
   399 ;;      Locals:         1       0       0       0       0
   400 ;;      Temps:          2       0       0       0       0
   401 ;;      Totals:         3       0       0       0       0
   402 ;;Total ram usage:        3 bytes
   403 ;; Hardware stack levels used: 1
   404 ;; This function calls:
   405 ;;		Nothing
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411     0737                     _lcd_data:	
   412                           ;psect for function _lcd_data
   413                           
   414                           
   415                           ;incstack = 0
   416                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   417                           ;lcd_data@value stored from wreg
   418     0737  00F2               	movwf	lcd_data@value
   419     0738                     l683:
   420                           
   421                           ;class3_output.c: 58:     PORTC|=0X08;
   422     0738  1283               	bcf	3,5	;RP0=0, select bank0
   423     0739  1303               	bcf	3,6	;RP1=0, select bank0
   424     073A  1587               	bsf	7,3	;volatile
   425     073B                     l685:
   426                           
   427                           ;class3_output.c: 59:     PORTD=value;
   428     073B  0872               	movf	lcd_data@value,w
   429     073C  0088               	movwf	8	;volatile
   430     073D                     l687:
   431                           
   432                           ;class3_output.c: 60:     PORTC|=0x01;
   433     073D  1407               	bsf	7,0	;volatile
   434     073E                     l689:
   435                           
   436                           ;class3_output.c: 61:     PORTC&= ~0x01;
   437     073E  30FE               	movlw	254
   438     073F  00F0               	movwf	??_lcd_data
   439     0740  0870               	movf	??_lcd_data,w
   440     0741  0587               	andwf	7,f	;volatile
   441     0742                     l691:
   442                           
   443                           ;class3_output.c: 62:     _delay((unsigned long)((100)*(6000000/4000.0)));
   444     0742  30C3               	movlw	195
   445     0743  00F1               	movwf	??_lcd_data+1
   446     0744  30CD               	movlw	205
   447     0745  00F0               	movwf	??_lcd_data
   448     0746                     u37:
   449     0746  0BF0               	decfsz	??_lcd_data,f
   450     0747  2F46               	goto	u37
   451     0748  0BF1               	decfsz	??_lcd_data+1,f
   452     0749  2F46               	goto	u37
   453     074A                     l36:
   454     074A  0008               	return
   455     074B                     __end_of_lcd_data:
   456                           
   457                           	psect	text2
   458     0786                     __ptext2:	
   459 ;; *************** function _init *****************
   460 ;; Defined at:
   461 ;;		line 38 in file "class3_output.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0, pclath, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   475 ;;      Params:         0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0
   477 ;;      Temps:          2       0       0       0       0
   478 ;;      Totals:         2       0       0       0       0
   479 ;;Total ram usage:        2 bytes
   480 ;; Hardware stack levels used: 1
   481 ;; Hardware stack levels required when called: 1
   482 ;; This function calls:
   483 ;;		_lcd_command
   484 ;; This function is called by:
   485 ;;		_main
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489     0786                     _init:	
   490                           ;psect for function _init
   491                           
   492     0786                     l653:	
   493                           ;incstack = 0
   494                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   495                           
   496                           
   497                           ;class3_output.c: 39:     TRISC=0X00;
   498     0786  1683               	bsf	3,5	;RP0=1, select bank1
   499     0787  1303               	bcf	3,6	;RP1=0, select bank1
   500     0788  0187               	clrf	7	;volatile
   501                           
   502                           ;class3_output.c: 40:     TRISD=0X00;
   503     0789  0188               	clrf	8	;volatile
   504     078A                     l655:
   505                           
   506                           ;class3_output.c: 41:     lcd_command(0X30);
   507     078A  3030               	movlw	48
   508     078B  120A  118A  274B  120A  118A  	fcall	_lcd_command
   509     0790                     l657:
   510                           
   511                           ;class3_output.c: 42:     _delay((unsigned long)((100)*(6000000/4000.0)));
   512     0790  30C3               	movlw	195
   513     0791  00F4               	movwf	??_init+1
   514     0792  30CD               	movlw	205
   515     0793  00F3               	movwf	??_init
   516     0794                     u47:
   517     0794  0BF3               	decfsz	??_init,f
   518     0795  2F94               	goto	u47
   519     0796  0BF4               	decfsz	??_init+1,f
   520     0797  2F94               	goto	u47
   521     0798                     l659:
   522                           
   523                           ;class3_output.c: 43:     lcd_command(0X3F);
   524     0798  303F               	movlw	63
   525     0799  120A  118A  274B  120A  118A  	fcall	_lcd_command
   526     079E                     l661:
   527                           
   528                           ;class3_output.c: 44:     _delay((unsigned long)((100)*(6000000/4000.0)));
   529     079E  30C3               	movlw	195
   530     079F  00F4               	movwf	??_init+1
   531     07A0  30CD               	movlw	205
   532     07A1  00F3               	movwf	??_init
   533     07A2                     u57:
   534     07A2  0BF3               	decfsz	??_init,f
   535     07A3  2FA2               	goto	u57
   536     07A4  0BF4               	decfsz	??_init+1,f
   537     07A5  2FA2               	goto	u57
   538     07A6                     l663:
   539                           
   540                           ;class3_output.c: 45:     lcd_command(0X30);
   541     07A6  3030               	movlw	48
   542     07A7  120A  118A  274B  120A  118A  	fcall	_lcd_command
   543     07AC                     l665:
   544                           
   545                           ;class3_output.c: 46:     _delay((unsigned long)((100)*(6000000/4000.0)));
   546     07AC  30C3               	movlw	195
   547     07AD  00F4               	movwf	??_init+1
   548     07AE  30CD               	movlw	205
   549     07AF  00F3               	movwf	??_init
   550     07B0                     u67:
   551     07B0  0BF3               	decfsz	??_init,f
   552     07B1  2FB0               	goto	u67
   553     07B2  0BF4               	decfsz	??_init+1,f
   554     07B3  2FB0               	goto	u67
   555     07B4                     l667:
   556                           
   557                           ;class3_output.c: 47:     lcd_command(0X38);
   558     07B4  3038               	movlw	56
   559     07B5  120A  118A  274B  120A  118A  	fcall	_lcd_command
   560     07BA                     l669:
   561                           
   562                           ;class3_output.c: 48:     _delay((unsigned long)((100)*(6000000/4000.0)));
   563     07BA  30C3               	movlw	195
   564     07BB  00F4               	movwf	??_init+1
   565     07BC  30CD               	movlw	205
   566     07BD  00F3               	movwf	??_init
   567     07BE                     u77:
   568     07BE  0BF3               	decfsz	??_init,f
   569     07BF  2FBE               	goto	u77
   570     07C0  0BF4               	decfsz	??_init+1,f
   571     07C1  2FBE               	goto	u77
   572     07C2                     l671:
   573                           
   574                           ;class3_output.c: 49:     lcd_command(0X06);
   575     07C2  3006               	movlw	6
   576     07C3  120A  118A  274B  120A  118A  	fcall	_lcd_command
   577     07C8                     l673:
   578                           
   579                           ;class3_output.c: 50:     _delay((unsigned long)((100)*(6000000/4000.0)));
   580     07C8  30C3               	movlw	195
   581     07C9  00F4               	movwf	??_init+1
   582     07CA  30CD               	movlw	205
   583     07CB  00F3               	movwf	??_init
   584     07CC                     u87:
   585     07CC  0BF3               	decfsz	??_init,f
   586     07CD  2FCC               	goto	u87
   587     07CE  0BF4               	decfsz	??_init+1,f
   588     07CF  2FCC               	goto	u87
   589     07D0                     l675:
   590                           
   591                           ;class3_output.c: 51:     lcd_command(0X0C);
   592     07D0  300C               	movlw	12
   593     07D1  120A  118A  274B  120A  118A  	fcall	_lcd_command
   594     07D6                     l677:
   595                           
   596                           ;class3_output.c: 52:     _delay((unsigned long)((100)*(6000000/4000.0)));
   597     07D6  30C3               	movlw	195
   598     07D7  00F4               	movwf	??_init+1
   599     07D8  30CD               	movlw	205
   600     07D9  00F3               	movwf	??_init
   601     07DA                     u97:
   602     07DA  0BF3               	decfsz	??_init,f
   603     07DB  2FDA               	goto	u97
   604     07DC  0BF4               	decfsz	??_init+1,f
   605     07DD  2FDA               	goto	u97
   606     07DE                     l679:
   607                           
   608                           ;class3_output.c: 53:     lcd_command(0X01);
   609     07DE  3001               	movlw	1
   610     07DF  120A  118A  274B  120A  118A  	fcall	_lcd_command
   611     07E4                     l681:
   612                           
   613                           ;class3_output.c: 54:     _delay((unsigned long)((100)*(6000000/4000.0)));
   614     07E4  30C3               	movlw	195
   615     07E5  00F4               	movwf	??_init+1
   616     07E6  30CD               	movlw	205
   617     07E7  00F3               	movwf	??_init
   618     07E8                     u107:
   619     07E8  0BF3               	decfsz	??_init,f
   620     07E9  2FE8               	goto	u107
   621     07EA  0BF4               	decfsz	??_init+1,f
   622     07EB  2FE8               	goto	u107
   623     07EC                     l33:
   624     07EC  0008               	return
   625     07ED                     __end_of_init:
   626                           
   627                           	psect	text3
   628     074B                     __ptext3:	
   629 ;; *************** function _lcd_command *****************
   630 ;; Defined at:
   631 ;;		line 65 in file "class3_output.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  value           1    wreg     unsigned char 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  value           1    2[COMMON] unsigned char 
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, status,2, status,0
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   645 ;;      Params:         0       0       0       0       0
   646 ;;      Locals:         1       0       0       0       0
   647 ;;      Temps:          2       0       0       0       0
   648 ;;      Totals:         3       0       0       0       0
   649 ;;Total ram usage:        3 bytes
   650 ;; Hardware stack levels used: 1
   651 ;; This function calls:
   652 ;;		Nothing
   653 ;; This function is called by:
   654 ;;		_main
   655 ;;		_init
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659     074B                     _lcd_command:	
   660                           ;psect for function _lcd_command
   661                           
   662                           
   663                           ;incstack = 0
   664                           ; Regs used in _lcd_command: [wreg+status,2+status,0]
   665                           ;lcd_command@value stored from wreg
   666     074B  00F2               	movwf	lcd_command@value
   667     074C                     l645:
   668                           
   669                           ;class3_output.c: 66:     PORTC&= ~0X08;
   670     074C  30F7               	movlw	247
   671     074D  00F0               	movwf	??_lcd_command
   672     074E  0870               	movf	??_lcd_command,w
   673     074F  1283               	bcf	3,5	;RP0=0, select bank0
   674     0750  1303               	bcf	3,6	;RP1=0, select bank0
   675     0751  0587               	andwf	7,f	;volatile
   676     0752                     l647:
   677                           
   678                           ;class3_output.c: 67:     PORTD=value;
   679     0752  0872               	movf	lcd_command@value,w
   680     0753  0088               	movwf	8	;volatile
   681     0754                     l649:
   682                           
   683                           ;class3_output.c: 68:     PORTC|=0x01;
   684     0754  1407               	bsf	7,0	;volatile
   685     0755                     l651:
   686                           
   687                           ;class3_output.c: 69:     PORTC&= ~0x01;
   688     0755  30FE               	movlw	254
   689     0756  00F0               	movwf	??_lcd_command
   690     0757  0870               	movf	??_lcd_command,w
   691     0758  0587               	andwf	7,f	;volatile
   692                           
   693                           ;class3_output.c: 70:     _delay((unsigned long)((100)*(6000000/4000.0)));
   694     0759  30C3               	movlw	195
   695     075A  00F1               	movwf	??_lcd_command+1
   696     075B  30CD               	movlw	205
   697     075C  00F0               	movwf	??_lcd_command
   698     075D                     u117:
   699     075D  0BF0               	decfsz	??_lcd_command,f
   700     075E  2F5D               	goto	u117
   701     075F  0BF1               	decfsz	??_lcd_command+1,f
   702     0760  2F5D               	goto	u117
   703     0761                     l39:
   704     0761  0008               	return
   705     0762                     __end_of_lcd_command:
   706     007E                     btemp	set	126	;btemp
   707     007E                     wtemp0	set	126
   708                           
   709                           	psect	config
   710                           
   711                           ;Config register CONFIG @ 0x2007
   712                           ;	Oscillator Selection bits
   713                           ;	FOSC = EXTRC, RC oscillator
   714                           ;	Watchdog Timer Enable bit
   715                           ;	WDTE = OFF, WDT disabled
   716                           ;	Power-up Timer Enable bit
   717                           ;	PWRTE = OFF, PWRT disabled
   718                           ;	Brown-out Reset Enable bit
   719                           ;	BOREN = OFF, BOR disabled
   720                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   721                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   722                           ;	Data EEPROM Memory Code Protection bit
   723                           ;	CPD = OFF, Data EEPROM code protection off
   724                           ;	Flash Program Memory Write Enable bits
   725                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   726                           ;	In-Circuit Debugger Mode bit
   727                           ;	DEBUG = 0x1, unprogrammed default
   728                           ;	Flash Program Memory Code Protection bit
   729                           ;	CP = OFF, Code protection off
   730     2007                     	org	8199
   731     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       7
    BANK0            80      0      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      66
                                              5 COMMON     1     1      0
                               _init
                        _lcd_command
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _lcd_command
   _lcd_command
   _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       C       5       15.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      13      12        0.0%
ABS                  0      0      13       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Jul 18 22:28:22 2024

                      _i 0076                        pc 0002                       l33 07EC  
                     l27 0782                       l36 074A                       l39 0761  
                     u20 0782                       u21 0781                       u37 0746  
                     u47 0794                       u57 07A2                       u67 07B0  
                     u77 07BE                       u87 07CC                       u97 07DA  
                     fsr 0004            lcd_data@value 0072                      l701 076E  
                    l703 0778                      l705 077C                      l651 0755  
                    l645 074C                      l661 079E                      l653 0786  
                    l647 0752                      l671 07C2                      l663 07A6  
                    l655 078A                      l649 0754                      l681 07E4  
                    l673 07C8                      l665 07AC                      l657 0790  
                    l675 07D0                      l667 07B4                      l659 0798  
                    l691 0742                      l683 0738                      l677 07D6  
                    l669 07BA                      l685 073B                      l693 0762  
                    l679 07DE                      l687 073D                      l695 076D  
                    l689 073E                      u107 07E8                      u117 075D  
                    _arr 0020                      fsr0 0004                      indf 0000  
                   _main 0762                     _init 0786                     btemp 007E  
                   start 0000                    ?_main 0070                    ?_init 0070  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07ED             __end_of_main 0786  
           __end_of_init 07ED                   ??_main 0075                   ??_init 0073  
       __end_of_lcd_data 074B  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 0718               __pmaintext 0762                ?_lcd_data 0070  
                __ptext1 0737                  __ptext2 0786                  __ptext3 074B  
             ??_lcd_data 0070     end_of_initialization 07FC            ??_lcd_command 0070  
    start_initialization 07ED               init_fetch0 0724      __end_of_lcd_command 0762  
            __pdataBANK0 0020              __pbssCOMMON 0076                ___latbits 0002  
       lcd_command@value 0072              _lcd_command 074B                 _lcd_data 0737  
               init_ram0 0728             ?_lcd_command 0070  
